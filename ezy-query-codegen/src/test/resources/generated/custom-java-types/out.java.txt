package mypackage.sql;

import io.github.kayr.ezyquery.EzyQueryWithResult;
import io.github.kayr.ezyquery.api.EzyCriteria;
import io.github.kayr.ezyquery.api.Field;
import io.github.kayr.ezyquery.api.SqlBuilder;
import io.github.kayr.ezyquery.parser.QueryAndParams;
import io.github.kayr.ezyquery.parser.SqlParts;
import io.github.kayr.ezyquery.sql.DynamicFieldSetter;
import java.lang.Class;
import java.lang.IllegalArgumentException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Vector;
import javax.annotation.processing.Generated;

/**
 * SELECT
 *    maq.f1 as f1_double,
 *    maq.f2 as f2_random,
 *    maq.f3 as f3_vector,
 *    maq.f4 as f4_date
 * FROM
 *     m_wallet maw
 */
@Generated(
    value = "io.github.kayr.ezyquery.gen.QueryGen",
    date = "0000-00-00 00:00:00"
)
public class MyQuery implements EzyQueryWithResult<MyQuery.Result> {
  public static final MyQuery MY_QUERY = new MyQuery();

  public final Field<BigDecimal> F1 = Field.of("maq.f1", "f1", BigDecimal.class,Field.ExpressionType.COLUMN);

  public final Field<String> F2 = Field.of("maq.f2", "f2", String.class,Field.ExpressionType.COLUMN);

  public final Field<Vector> F3 = Field.of("maq.f3", "f3", Vector.class,Field.ExpressionType.COLUMN);

  public final Field<LocalDate> F4 = Field.of("maq.f4", "f4", LocalDate.class,Field.ExpressionType.COLUMN);

  private final SqlParts schema = SqlParts.of(
      SqlParts.textPart("m_wallet maw")
  );

  private final List<Field<?>> fields = new ArrayList<Field<?>>();

  private MyQuery() {
    init();
  }

  private void init() {
    fields.add(F1);
    fields.add(F2);
    fields.add(F3);
    fields.add(F4);
  }

  public QueryAndParams query(EzyCriteria criteria) {
    return SqlBuilder.buildSql(this, criteria);
  }

  @Override
  public SqlParts schema() {
    return this.schema;
  }

  @Override
  public Optional<SqlParts> whereClause() {
    return Optional.empty();
  }

  @Override
  public Optional<SqlParts> orderByClause() {
    return Optional.empty();
  }

  @Override
  public List<Field<?>> fields() {
    return this.fields;
  }

  @Override
  public Class<Result> resultClass() {
    return Result.class;
  }

  public static class Result implements DynamicFieldSetter {
    private BigDecimal f1;

    private String f2;

    private Vector f3;

    private LocalDate f4;

    public BigDecimal getF1() {
      return f1;
    }

    public String getF2() {
      return f2;
    }

    public Vector getF3() {
      return f3;
    }

    public LocalDate getF4() {
      return f4;
    }

    @Override
    public String toString() {
      return "MyQuery.Result{"
      + "f1 = " + f1
      + ", f2 = " + f2
      + ", f3 = " + f3
      + ", f4 = " + f4
       + "}";
    }

    @Override
    public void setField(String fieldName, Object value) {
      switch(fieldName) {
        case "f1":
          this.f1 = (BigDecimal) value;
          break;
        case "f2":
          this.f2 = (String) value;
          break;
        case "f3":
          this.f3 = (Vector) value;
          break;
        case "f4":
          this.f4 = (LocalDate) value;
          break;
        default:
          throw new IllegalArgumentException("Unknown field: " + fieldName);
        }
      }
    }
  }