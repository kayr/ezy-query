package mypackage.sql;

import io.github.kayr.ezyquery.EzyQueryWithResult;
import io.github.kayr.ezyquery.api.EzyCriteria;
import io.github.kayr.ezyquery.api.Field;
import io.github.kayr.ezyquery.api.NamedParam;
import io.github.kayr.ezyquery.api.SqlBuilder;
import io.github.kayr.ezyquery.parser.QueryAndParams;
import io.github.kayr.ezyquery.parser.SqlParts;
import io.github.kayr.ezyquery.sql.DynamicFieldSetter;
import java.lang.Class;
import java.lang.IllegalArgumentException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import javax.annotation.processing.Generated;

/**
 * SELECT a.name as name, b.product_name as prodName
 * FROM users AS a
 * JOIN orders AS b ON a.user_id = b.user_id and a.userId IN (:joinIds)
 * WHERE a.user_id = :userID
 * AND b.order_id = :orderID
 * AND b.user_id2 = :userID
 * ORDER BY CASE :orderByColumn
 *          WHEN 'name' THEN a.name
 *          WHEN 'product_name' THEN b.product_name
 *          END ASC;
 */
@Generated(
    value = "io.github.kayr.ezyquery.gen.QueryGen",
    date = "0000-00-00 00:00:00"
)
public class MyQuery implements EzyQueryWithResult<MyQuery.Result> {
  public static final MyQuery MY_QUERY = new MyQuery();

  public static final Params PARAMS = new Params();

  public final Field<Object> NAME = Field.of("a.name", "name", Object.class,Field.ExpressionType.COLUMN);

  public final Field<Object> PROD_NAME = Field.of("b.product_name", "prodName", Object.class,Field.ExpressionType.COLUMN);

  private final SqlParts schema = SqlParts.of(
      SqlParts.textPart("users AS a\n"
          + "JOIN orders AS b ON a.user_id = b.user_id AND a.userId IN ("),
      SqlParts.paramPart("joinIds"),
      SqlParts.textPart(")")
  );

  private final List<Field<?>> fields = new ArrayList<Field<?>>();

  private MyQuery() {
    init();
  }

  private void init() {
    fields.add(NAME);
    fields.add(PROD_NAME);
  }

  public QueryAndParams query(EzyCriteria criteria) {
    return SqlBuilder.buildSql(this, criteria);
  }

  @Override
  public SqlParts schema() {
    return this.schema;
  }

  @Override
  public Optional<SqlParts> whereClause() {
    return Optional.of(
          SqlParts.of(
              SqlParts.textPart("a.user_id = "),
              SqlParts.paramPart("userID"),
              SqlParts.textPart(" AND b.order_id = "),
              SqlParts.paramPart("orderID"),
              SqlParts.textPart(" AND b.user_id2 = "),
              SqlParts.paramPart("userID")
          ));
  }

  @Override
  public Optional<SqlParts> orderByClause() {
    return Optional.of(
          SqlParts.of(
              SqlParts.textPart("CASE "),
              SqlParts.paramPart("orderByColumn"),
              SqlParts.textPart(" WHEN 'name' THEN a.name WHEN 'product_name' THEN b.product_name END ASC")
          ));
  }

  @Override
  public List<Field<?>> fields() {
    return this.fields;
  }

  @Override
  public Class<Result> resultClass() {
    return Result.class;
  }

  public static class Result implements DynamicFieldSetter {
    private Object name;

    private Object prodName;

    public Object getName() {
      return name;
    }

    public Object getProdName() {
      return prodName;
    }

    @Override
    public String toString() {
      return "MyQuery.Result{"
      + "name = " + name
      + ", prodName = " + prodName
       + "}";
    }

    @Override
    public void setField(String fieldName, Object value) {
      switch(fieldName) {
        case "name":
          this.name = (Object) value;
          break;
        case "prodName":
          this.prodName = (Object) value;
          break;
        default:
          throw new IllegalArgumentException("Unknown field: " + fieldName);
        }
      }
    }

    public static class Params {
      public final NamedParam JOIN_IDS = NamedParam.of("joinIds");

      public final NamedParam USER_ID = NamedParam.of("userID");

      public final NamedParam ORDER_ID = NamedParam.of("orderID");

      public final NamedParam ORDER_BY_COLUMN = NamedParam.of("orderByColumn");
    }
  }