package mypackage.sql;

import io.github.kayr.ezyquery.EzyQueryWithResult;
import io.github.kayr.ezyquery.api.EzyCriteria;
import io.github.kayr.ezyquery.api.Field;
import io.github.kayr.ezyquery.api.SqlBuilder;
import io.github.kayr.ezyquery.parser.QueryAndParams;
import io.github.kayr.ezyquery.parser.SqlParts;
import io.github.kayr.ezyquery.sql.DynamicFieldSetter;
import java.lang.Boolean;
import java.lang.Byte;
import java.lang.Class;
import java.lang.Double;
import java.lang.Float;
import java.lang.IllegalArgumentException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import javax.annotation.processing.Generated;

/**
 * SELECT
 *     td.id AS 'id_bigint',
 *     td.long_ AS 'longval_long',
 *     td.int_ AS 'intval_int',
 *     tr.float_ AS 'floatval_float',
 *     maw.double_ AS 'doubleval_double',
 *     mtw.string_ AS 'stringval_string',
 *     mtw.boolean_ AS 'booleanval_boolean',
 *     tr.date_ AS 'dateval_date',
 *     tr.time AS 'timeval_time',
 *     tr.bigint_ AS 'bigintval_bigint',
 *     tr.bigdecimal_ AS 'bigdecimalval_decimal',
 *     tr.blob_ AS 'blobval_byte',
 *     tr.object_ AS 'objectval_object'
 * FROM
 *     m_wallet maw
 * INNER JOIN m_tenant_wallet mtw ON
 *     mtw.id = maw.wallet_id
 * INNER JOIN w_wallet_transaction_request tr ON
 *     tr.wallet_id = mtw.id
 * INNER JOIN m_wallet_transaction_detail td ON
 *     td.wallet_tx_request_id = tr.id
 *     where 1 <> 8
 * ORDER BY td.id desc
 */
@Generated(
    value = "io.github.kayr.ezyquery.gen.QueryGen",
    date = "0000-00-00 00:00:00"
)
public class MyQuery implements EzyQueryWithResult<MyQuery.Result> {
  public static final MyQuery MY_QUERY = new MyQuery();

  public final Field<BigInteger> ID = Field.of("td.id", "id", BigInteger.class,Field.ExpressionType.COLUMN);

  public final Field<Long> LONGVAL = Field.of("td.long_", "longval", Long.class,Field.ExpressionType.COLUMN);

  public final Field<Integer> INTVAL = Field.of("td.int_", "intval", Integer.class,Field.ExpressionType.COLUMN);

  public final Field<Float> FLOATVAL = Field.of("tr.float_", "floatval", Float.class,Field.ExpressionType.COLUMN);

  public final Field<Double> DOUBLEVAL = Field.of("maw.double_", "doubleval", Double.class,Field.ExpressionType.COLUMN);

  public final Field<String> STRINGVAL = Field.of("mtw.string_", "stringval", String.class,Field.ExpressionType.COLUMN);

  public final Field<Boolean> BOOLEANVAL = Field.of("mtw.boolean_", "booleanval", Boolean.class,Field.ExpressionType.COLUMN);

  public final Field<Date> DATEVAL = Field.of("tr.date_", "dateval", Date.class,Field.ExpressionType.COLUMN);

  public final Field<Timestamp> TIMEVAL = Field.of("tr.time", "timeval", Timestamp.class,Field.ExpressionType.COLUMN);

  public final Field<BigInteger> BIGINTVAL = Field.of("tr.bigint_", "bigintval", BigInteger.class,Field.ExpressionType.COLUMN);

  public final Field<BigDecimal> BIGDECIMALVAL = Field.of("tr.bigdecimal_", "bigdecimalval", BigDecimal.class,Field.ExpressionType.COLUMN);

  public final Field<Byte> BLOBVAL = Field.of("tr.blob_", "blobval", Byte.class,Field.ExpressionType.COLUMN);

  public final Field<Object> OBJECTVAL = Field.of("tr.object_", "objectval", Object.class,Field.ExpressionType.COLUMN);

  private final SqlParts schema = SqlParts.of(
      SqlParts.textPart("m_wallet maw\n"
          + "INNER JOIN m_tenant_wallet mtw ON mtw.id = maw.wallet_id\n"
          + "INNER JOIN w_wallet_transaction_request tr ON tr.wallet_id = mtw.id\n"
          + "INNER JOIN m_wallet_transaction_detail td ON td.wallet_tx_request_id = tr.id")
  );

  private final List<Field<?>> fields = new ArrayList<Field<?>>();

  private MyQuery() {
    init();
  }

  private void init() {
    fields.add(ID);
    fields.add(LONGVAL);
    fields.add(INTVAL);
    fields.add(FLOATVAL);
    fields.add(DOUBLEVAL);
    fields.add(STRINGVAL);
    fields.add(BOOLEANVAL);
    fields.add(DATEVAL);
    fields.add(TIMEVAL);
    fields.add(BIGINTVAL);
    fields.add(BIGDECIMALVAL);
    fields.add(BLOBVAL);
    fields.add(OBJECTVAL);
  }

  public QueryAndParams query(EzyCriteria criteria) {
    return SqlBuilder.buildSql(this, criteria);
  }

  @Override
  public SqlParts schema() {
    return this.schema;
  }

  @Override
  public Optional<SqlParts> whereClause() {
    return Optional.of(
          SqlParts.of(
              SqlParts.textPart("1 <> 8")
          ));
  }

  @Override
  public Optional<SqlParts> orderByClause() {
    return Optional.of(
          SqlParts.of(
              SqlParts.textPart("td.id DESC")
          ));
  }

  @Override
  public List<Field<?>> fields() {
    return this.fields;
  }

  @Override
  public Class<Result> resultClass() {
    return Result.class;
  }

  public static class Result implements DynamicFieldSetter {
    private BigInteger id;

    private Long longval;

    private Integer intval;

    private Float floatval;

    private Double doubleval;

    private String stringval;

    private Boolean booleanval;

    private Date dateval;

    private Timestamp timeval;

    private BigInteger bigintval;

    private BigDecimal bigdecimalval;

    private Byte blobval;

    private Object objectval;

    public BigInteger getId() {
      return id;
    }

    public Long getLongval() {
      return longval;
    }

    public Integer getIntval() {
      return intval;
    }

    public Float getFloatval() {
      return floatval;
    }

    public Double getDoubleval() {
      return doubleval;
    }

    public String getStringval() {
      return stringval;
    }

    public Boolean getBooleanval() {
      return booleanval;
    }

    public Date getDateval() {
      return dateval;
    }

    public Timestamp getTimeval() {
      return timeval;
    }

    public BigInteger getBigintval() {
      return bigintval;
    }

    public BigDecimal getBigdecimalval() {
      return bigdecimalval;
    }

    public Byte getBlobval() {
      return blobval;
    }

    public Object getObjectval() {
      return objectval;
    }

    @Override
    public String toString() {
      return "MyQuery.Result{"
      + "id = " + id
      + ", longval = " + longval
      + ", intval = " + intval
      + ", floatval = " + floatval
      + ", doubleval = " + doubleval
      + ", stringval = " + stringval
      + ", booleanval = " + booleanval
      + ", dateval = " + dateval
      + ", timeval = " + timeval
      + ", bigintval = " + bigintval
      + ", bigdecimalval = " + bigdecimalval
      + ", blobval = " + blobval
      + ", objectval = " + objectval
       + "}";
    }

    @Override
    public void setField(String fieldName, Object value) {
      switch(fieldName) {
        case "id":
          this.id = (BigInteger) value;
          break;
        case "longval":
          this.longval = (Long) value;
          break;
        case "intval":
          this.intval = (Integer) value;
          break;
        case "floatval":
          this.floatval = (Float) value;
          break;
        case "doubleval":
          this.doubleval = (Double) value;
          break;
        case "stringval":
          this.stringval = (String) value;
          break;
        case "booleanval":
          this.booleanval = (Boolean) value;
          break;
        case "dateval":
          this.dateval = (Date) value;
          break;
        case "timeval":
          this.timeval = (Timestamp) value;
          break;
        case "bigintval":
          this.bigintval = (BigInteger) value;
          break;
        case "bigdecimalval":
          this.bigdecimalval = (BigDecimal) value;
          break;
        case "blobval":
          this.blobval = (Byte) value;
          break;
        case "objectval":
          this.objectval = (Object) value;
          break;
        default:
          throw new IllegalArgumentException("Unknown field: " + fieldName);
        }
      }
    }
  }