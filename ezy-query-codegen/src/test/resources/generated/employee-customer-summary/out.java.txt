package mypackage.sql;

import io.github.kayr.ezyquery.EzyQueryWithResult;
import io.github.kayr.ezyquery.api.CriteriaHolder;
import io.github.kayr.ezyquery.api.EzyCriteria;
import io.github.kayr.ezyquery.api.Field;
import io.github.kayr.ezyquery.api.NamedCriteriaParam;
import io.github.kayr.ezyquery.api.NamedParam;
import io.github.kayr.ezyquery.api.SqlBuilder;
import io.github.kayr.ezyquery.parser.QueryAndParams;
import io.github.kayr.ezyquery.parser.SqlParts;
import io.github.kayr.ezyquery.sql.DynamicFieldSetter;
import java.lang.Class;
import java.lang.IllegalArgumentException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import javax.annotation.processing.Generated;

/**
 * SELECT
 *     e.employeeNumber as "employeeNumber",
 *     e.firstName as "firstName",
 *     o.officeCode as "officeCode",
 *     o.country as "country",
 *     o.addressLine1 as "addressLine1",
 *     c.totalCustomers as "totalCustomers"
 * FROM (
 *     SELECT salesRepEmployeeNumber as salesRepEmployeeNumber, some_function() AS totalCustomers
 *     FROM customers
 *     WHERE :_ezy_customerSummary
 *     GROUP BY salesRepEmployeeNumber
 * ) AS c
 * JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber
 * JOIN offices o ON e.officeCode = o.officeCode;
 */
@Generated(
    value = "io.github.kayr.ezyquery.gen.QueryGen",
    date = "0000-00-00 00:00:00"
)
public class MyQuery implements EzyQueryWithResult<MyQuery.Result> {
  public static final MyQuery MY_QUERY = new MyQuery();

  public static final Params PARAMS = new Params();

  public static final Criteria CRITERIA = new Criteria();

  public final Field<Object> EMPLOYEE_NUMBER = Field.of("e.employeeNumber", "employeeNumber", Object.class,Field.ExpressionType.COLUMN);

  public final Field<Object> FIRST_NAME = Field.of("e.firstName", "firstName", Object.class,Field.ExpressionType.COLUMN);

  public final Field<Object> OFFICE_CODE = Field.of("o.officeCode", "officeCode", Object.class,Field.ExpressionType.COLUMN);

  public final Field<Object> COUNTRY = Field.of("o.country", "country", Object.class,Field.ExpressionType.COLUMN);

  public final Field<Object> ADDRESS_LINE1 = Field.of("o.addressLine1", "addressLine1", Object.class,Field.ExpressionType.COLUMN);

  public final Field<Object> TOTAL_CUSTOMERS = Field.of("c.totalCustomers", "totalCustomers", Object.class,Field.ExpressionType.COLUMN);

  private final SqlParts schema = SqlParts.of(
      SqlParts.textPart("(SELECT salesRepEmployeeNumber AS salesRepEmployeeNumber, some_function() AS totalCustomers FROM customers WHERE "),
      SqlParts.paramPart("_ezy_customerSummary"),
      SqlParts.textPart(" GROUP BY salesRepEmployeeNumber) AS c\n"
          + "JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber\n"
          + "JOIN offices o ON e.officeCode = o.officeCode")
  );

  private final List<Field<?>> fields = new ArrayList<Field<?>>();

  private MyQuery() {
    init();
  }

  private void init() {
    fields.add(EMPLOYEE_NUMBER);
    fields.add(FIRST_NAME);
    fields.add(OFFICE_CODE);
    fields.add(COUNTRY);
    fields.add(ADDRESS_LINE1);
    fields.add(TOTAL_CUSTOMERS);
  }

  public QueryAndParams query(EzyCriteria criteria) {
    return SqlBuilder.buildSql(this, criteria);
  }

  @Override
  public SqlParts schema() {
    return this.schema;
  }

  @Override
  public Optional<SqlParts> whereClause() {
    return Optional.empty();
  }

  @Override
  public Optional<SqlParts> orderByClause() {
    return Optional.empty();
  }

  @Override
  public List<Field<?>> fields() {
    return this.fields;
  }

  @Override
  public Class<Result> resultClass() {
    return Result.class;
  }

  public static class Result implements DynamicFieldSetter {
    private Object employeeNumber;

    private Object firstName;

    private Object officeCode;

    private Object country;

    private Object addressLine1;

    private Object totalCustomers;

    public Object getEmployeeNumber() {
      return employeeNumber;
    }

    public Object getFirstName() {
      return firstName;
    }

    public Object getOfficeCode() {
      return officeCode;
    }

    public Object getCountry() {
      return country;
    }

    public Object getAddressLine1() {
      return addressLine1;
    }

    public Object getTotalCustomers() {
      return totalCustomers;
    }

    @Override
    public String toString() {
      return "MyQuery.Result{"
      + "employeeNumber = " + employeeNumber
      + ", firstName = " + firstName
      + ", officeCode = " + officeCode
      + ", country = " + country
      + ", addressLine1 = " + addressLine1
      + ", totalCustomers = " + totalCustomers
       + "}";
    }

    @Override
    public void setField(String fieldName, Object value) {
      switch(fieldName) {
        case "employeeNumber":
          this.employeeNumber = (Object) value;
          break;
        case "firstName":
          this.firstName = (Object) value;
          break;
        case "officeCode":
          this.officeCode = (Object) value;
          break;
        case "country":
          this.country = (Object) value;
          break;
        case "addressLine1":
          this.addressLine1 = (Object) value;
          break;
        case "totalCustomers":
          this.totalCustomers = (Object) value;
          break;
        default:
          throw new IllegalArgumentException("Unknown field: " + fieldName);
        }
      }
    }

    public static class Params {
      public final NamedParam EZY_CUSTOMER_SUMMARY = NamedParam.of("_ezy_customerSummary");
    }

    public static final class Criteria {
      public final CustomerSummary CUSTOMER_SUMMARY = new CustomerSummary();
    }

    public static class CustomerSummary implements CriteriaHolder {
      public final Field<Object> SALES_REP_EMPLOYEE_NUMBER = Field.of("salesRepEmployeeNumber", "salesRepEmployeeNumber", Object.class,Field.ExpressionType.COLUMN);

      public final Field<Object> TOTAL_CUSTOMERS = Field.of("some_function()", "totalCustomers", Object.class,Field.ExpressionType.OTHER);

      private final List<Field<?>> fields = new ArrayList<Field<?>>();

      private CustomerSummary() {
        init();
      }

      private void init() {
        fields.add(SALES_REP_EMPLOYEE_NUMBER);
        fields.add(TOTAL_CUSTOMERS);
      }

      @Override
      public NamedCriteriaParam getName() {
        return NamedCriteriaParam.of("_ezy_customerSummary", fields);
      }
    }
  }